/*
 *Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
 *
 *Timothee Ewart - University of Geneva,
 *Andreas Hehn - Swiss Federal Institute of technology Zurich.
 *
 *Permission is hereby granted, free of charge, to any person or organization
 *obtaining a copy of the software and accompanying documentation covered by
 *this license (the "Software") to use, reproduce, display, distribute,
 *execute, and transmit the Software, and to prepare derivative works of the
 *Software, and to permit third-parties to whom the Software is furnished to
 *do so, all subject to the following:
 *
 *The copyright notices in the Software and this entire statement, including
 *the above license grant, this restriction and the following disclaimer,
 *must be included in all copies of the Software, in whole or in part, and
 *all derivative works of the Software, unless such copies or derivative
 *works are solely in the form of machine-executable object code generated by
 *a source language processor.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *DEALINGS IN THE SOFTWARE.
 */

#include <regression/vli/test_header.hpp>

using namespace vli::test;

VLI_STATIC_TEST(left_shift) {
  integer_type a;
  integer_type b;
  a[0] = 0xffffffffffffffff;
  b[0] = 0xfffffffffffffffe;
  b[integer_type::numwords - 1] = 1;

  for (integer_type::size_type i = 1; i < integer_type::numwords - 1; ++i) {
    a[i] = 0xffffffffffffffff;
    b[i] = 0xffffffffffffffff;
  }

  a <<= 1;

  BOOST_CHECK_EQUAL(a, b);
}

VLI_STATIC_TEST(right_shift) {
  integer_type a;
  integer_type b;

  for (integer_type::size_type i = 0; i < integer_type::numwords - 1; ++i) {
    a[i] = 0xffffffffffffffff;
    b[i] = 0xffffffffffffffff;
  }

  b[integer_type::numwords - 2] = 0x7fffffffffffffff;

  a >>= 1;

  BOOST_CHECK_EQUAL(a, b);
}

VLI_STATIC_TEST(minus_1_right_shift) {
  integer_type a(-1);

  for (integer_type::size_type i = 0; i < 64; ++i) {
    a >>= 1;
    BOOST_CHECK_EQUAL(a, integer_type(-1));
  }
}

VLI_FUZZABLE_TEST(left_shift_mul) {
  integer_type a;
  init(a, overflow_safe);
  integer_type b(a);

  a <<= 2;
  b *= 4;
  BOOST_CHECK_EQUAL(a, b);
}

VLI_FUZZABLE_TEST(left_right_shift) {
  integer_type a;
  init(a, overflow_safe);
  integer_type b(a);

  a <<= 13;
  a >>= 13;

  BOOST_CHECK_EQUAL(a, b);
}
