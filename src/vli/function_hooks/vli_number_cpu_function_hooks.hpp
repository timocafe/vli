/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef VLI_NUMBER_CPU_FUNCTION_HOOKS_HPP
#define VLI_NUMBER_CPU_FUNCTION_HOOKS_HPP

#include <boost/cstdint.hpp>
#include <limits>
#include "vli/detail/kernels_cpu.h"

namespace vli
{
  /* \cond I do not need this part in the doc*/
    //forwart declaration
    template <std::size_t NumBits>
    class integer;

    //????_assign functions
    template <std::size_t NumBits>
    void plus_assign(integer<NumBits> & integer_a, integer<NumBits> const& integer_b ){
         vli::detail::helper_inline_add<integer<NumBits>::numwords>::inline_add(&integer_a[0],&integer_b[0]);
    }

    template <std::size_t NumBits>
    void plus_assign(integer<NumBits> & integer_a,  boost::int64_t const b ){
        vli::detail::helper_inline_add<integer<NumBits>::numwords>::inline_add(&integer_a[0],b);
    }

    template <std::size_t NumBits>
    void plus_extend_assign(integer<NumBits+std::numeric_limits<typename integer<NumBits>::value_type>::digits> & integer_a, integer<NumBits> const& integer_b, integer<NumBits> const& integer_c){
        vli::detail::helper_inline_add<integer<NumBits>::numwords>::inline_add_extend(&integer_a[0],&integer_b[0],&integer_c[0]);
    }

    template <std::size_t NumBits>
    void minus_assign(integer<NumBits> & integer_a, integer<NumBits> const& integer_b ){
        vli::detail::helper_inline_sub<integer<NumBits>::numwords>::inline_sub(&integer_a[0],&integer_b[0]);
    }

    template <std::size_t NumBits>
    void minus_assign(integer<NumBits> & integer_a,  uint64_t const b ){
        vli::detail::helper_inline_sub<integer<NumBits>::numwords>::inline_sub(&integer_a[0],b);
    }

    template <std::size_t NumBits>
    void multiplies_assign( integer<NumBits>& integer_a , integer<NumBits> const & integer_b){
        using detail::mul;
        mul<integer<NumBits>::numwords>(&integer_a[0],&integer_b[0]);
    }

    template <std::size_t NumBits>
    void multiplies_assign(integer<NumBits> & integer_a,  uint64_t const b){
        using detail::mul;
        mul<integer<NumBits>::numwords>(&integer_a[0],b);
    }

    template <std::size_t NumBits>
    void multiplies(integer<2*NumBits>& integer_res , integer<NumBits> const & integer_a, integer<NumBits> const & integer_b){
        using detail::mul;
        mul<integer<NumBits>::numwords>(&integer_res[0],&integer_a[0],&integer_b[0]);
    }

    template <std::size_t NumBits>
    void multiply_add_assign(integer<2*NumBits>& integer_res , integer<NumBits> const & integer_a, integer<NumBits> const & integer_b){
        using detail::muladd;
        muladd<integer<NumBits>::numwords>(&integer_res[0],&integer_a[0],&integer_b[0]);
    }
      /* \endcond I do not need this part in the doc*/
} //namespace vli

#endif //VLI_NUMBER_CPU_FUNCTION_HOOKS_HPP
