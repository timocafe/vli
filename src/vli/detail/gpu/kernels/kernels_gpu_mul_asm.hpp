/*
 *Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
 *
 *Timothee Ewart - University of Geneva,
 *Andreas Hehn - Swiss Federal Institute of technology Zurich.
 *Maxim Milakov - NVIDIA Corporation
 *
 *Permission is hereby granted, free of charge, to any person or organization
 *obtaining a copy of the software and accompanying documentation covered by
 *this license (the "Software") to use, reproduce, display, distribute,
 *execute, and transmit the Software, and to prepare derivative works of the
 *Software, and to permit third-parties to whom the Software is furnished to
 *do so, all subject to the following:
 *
 *The copyright notices in the Software and this entire statement, including
 *the above license grant, this restriction and the following disclaimer,
 *must be included in all copies of the Software, in whole or in part, and
 *all derivative works of the Software, unless such copies or derivative
 *works are solely in the form of machine-executable object code generated by
 *a source language processor.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *DEALINGS IN THE SOFTWARE.
 
 */

#ifndef KERNELS_GPU_MUL_HPP
#define KERNELS_GPU_MUL_HPP

#include "vli/detail/gpu/kernels/kernel_macros.h"

namespace vli{
    namespace detail{

    //multiplication
    template <std::size_t NumBits>
    __device__ void mul_extend(boost::uint32_t * x,boost::uint32_t const* y,boost::uint32_t const* z);

    #define mul128bits_64bits_64bits(w, n, unused) \
        asm( \
              "mad.lo.cc.u32  %0, %4,  %3, %0; \n\t" /* c[i]   = a[0] * b[i] (low)  + c[i] (c[i]=0 for i=0) may generate carry bit (CB) */ \
              "madc.lo.cc.u32 %1, %5,  %3, %1; \n\t" /* c[i+1] = a[1] * b[i] (low)  + c[i+1] + CB                                       */ \
              BOOST_PP_IF(n,"addc.cc.u32 %4, 0, 0; \n\t",/* no extention n=0 */) /* c[i+6] += CB, n = 0 CB impossible                   */ \
              "mad.hi.cc.u32  %1, %4,  %3, %1; \n\t" /* c[i+1] = a[0] * b[i] (high) + c[i+1] + CB (c[i]=0 for i=0)                      */ \
              "madc.hi.cc.u32 %2, %5,  %3, %2; \n\t" /* c[i+2] = a[1] * b[i] (high) + c[i+2] + CB                                       */ \
              :"+r"(x[BOOST_PP_ADD(0,n)]),"+r"(x[BOOST_PP_ADD(1,n)]),"+r"(x[BOOST_PP_ADD(2,n)])                                            \
              :"r"(z[0]),"r"(z[1],"r"(y[0]),"r"(y[1])                                                                                               \
          );                                                                                                                               \

    #define mul256bits_128bits_128bits(w, n, unused) \
        asm volatile( \
              "mad.lo.cc.u32  %0, %6,  %5, %0; \n\t" /* c[i]   = a[0] * b[i] (low)  + c[i] (c[i]=0 for i=0) may generate carry bit (CB) */ \
              "madc.lo.cc.u32 %1, %7,  %5, %1; \n\t" /* c[i+1] = a[1] * b[i] (low)  + c[i+1] + CB                                       */ \
              "madc.lo.cc.u32 %2, %8,  %5, %2; \n\t" /* c[i+2] = a[2] * b[i] (low)  + c[i+1] + CB                                       */ \
              "madc.lo.cc.u32 %3, %9,  %5, %3; \n\t" /* c[i+3] = a[3] * b[i] (low)  + c[i+3] + CB                                       */ \
              BOOST_PP_IF(n,"addc.cc.u32 %4, 0, 0; \n\t",/* no extention n=0 */) /* c[i+6] += CB, n = 0 CB impossible                   */ \
              "mad.hi.cc.u32  %1, %6,  %5, %1; \n\t" /* c[i+1] = a[0] * b[i] (high) + c[i+1] + CB (c[i]=0 for i=0)                      */ \
              "madc.hi.cc.u32 %2, %7,  %5, %2; \n\t" /* c[i+2] = a[1] * b[i] (high) + c[i+2] + CB                                       */ \
              "madc.hi.cc.u32 %3, %8,  %5, %3; \n\t" /* c[i+3] = a[2] * b[i] (high) + c[i+3] + CB                                       */ \
              "madc.hi.cc.u32 %4, %9,  %5, %4; \n\t" /* c[i+3] = a[2] * b[i] (high) + c[i+3] + CB                                       */ \
              :"+r"(x[BOOST_PP_ADD(0,n)]),"+r"(x[BOOST_PP_ADD(1,n)]),"+r"(x[BOOST_PP_ADD(2,n)]),"+r"(x[BOOST_PP_ADD(3,n)]),"+r"(x[BOOST_PP_ADD(4,n)])   \
              :"r"(z[n]),"r"(y[0]),"r"(y[1]),"r"(y[2]),"r"(y[3]):"memory"                                                                 \
          );                                                                                                                               \

    template<>
    void mul_extend<256>(boost::uint32_t* x, boost::uint32_t const* y, boost::uint32_t const* z){
           BOOST_PP_REPEAT(4, mul256bits_128bits_128bits, ~)                                                                              \
    }

    template<>
    void mul_extend<128>(boost::uint32_t* x, boost::uint32_t const* y, boost::uint32_t const* z){
        asm volatile( 
              "mul.lo.u32 %0, %4, %6; \n\t"
              "mul.lo.u32 %1, %4, %7; \n\t"
              "mad.hi.cc.u32 %1, %4, %6, %1; \n\t"
              "madc.hi.u32 %2, %4, %7, %2; \n\t"

              "mad.lo.cc.u32 %1, %5, %6, %1; \n\t"
              "madc.lo.cc.u32 %2, %5, %7, %2; \n\t"
              "addc.u32 %3, 0, 0 ; \n\t"          
              "mad.hi.cc.u32 %2, %5, %6, %2; \n\t"
              "madc.hi.u32 %3, %5, %7, %3; \n\t"
              
              :"+r"(x[0]),"+r"(x[1]),"+r"(x[2]),"+r"(x[3])                                            
              :"r"(z[0]),"r"(z[1]),"r"(y[0]),"r"(y[1])                                                                                      
          );                                                                                                                               
    }

    #undef mul128bits_64bits_64bits
    #undef mul256bits_128bits_128bits

    #define mul384bits_192bits_192bits(w, n, unused) \
        asm( \
              "mad.lo.cc.u32  %0, %8,  %7, %0; \n\t" /* c[i]   = a[0] * b[i] (low)  + c[i] (c[i]=0 for i=0) may generate carry bit (CB) */ \
              "madc.lo.cc.u32 %1, %9,  %7, %1; \n\t" /* c[i+1] = a[1] * b[i] (low)  + c[i+1] + CB                                       */ \
              "madc.lo.cc.u32 %2, %10, %7, %2; \n\t" /* c[i+2] = a[2] * b[i] (low)  + c[i+1] + CB                                       */ \
              "madc.lo.cc.u32 %3, %11, %7, %3; \n\t" /* c[i+3] = a[3] * b[i] (low)  + c[i+3] + CB                                       */ \
              "madc.lo.cc.u32 %4, %12, %7, %4; \n\t" /* c[i+4] = a[4] * b[i] (low)  + c[i+4] + CB                                       */ \
              "madc.lo.cc.u32 %5, %13, %7, %5; \n\t" /* c[i+5] = a[5] * b[i] (low)  + c[i+5] + CB                                       */ \
              BOOST_PP_IF(n,"addc.cc.u32 %6, 0, 0; \n\t",/* no extention n=0 */) /* c[i+6] += CB, n = 0 CB impossible                   */ \
              "mad.hi.cc.u32  %1, %8,  %7, %1; \n\t" /* c[i+1] = a[0] * b[i] (high) + c[i+1] + CB (c[i]=0 for i=0)                      */ \
              "madc.hi.cc.u32 %2, %9,  %7, %2; \n\t" /* c[i+2] = a[1] * b[i] (high) + c[i+2] + CB                                       */ \
              "madc.hi.cc.u32 %3, %10, %7, %3; \n\t" /* c[i+3] = a[2] * b[i] (high) + c[i+3] + CB                                       */ \
              "madc.hi.cc.u32 %4, %11, %7, %4; \n\t" /* c[i+4] = a[3] * b[i] (high) + c[i+4] + CB                                       */ \
              "madc.hi.cc.u32 %5, %12, %7, %5; \n\t" /* c[i+5] = a[4] * b[i] (high) + c[i+5] + CB                                       */ \
              "madc.hi.cc.u32 %6, %13, %7, %6; \n\t" /* c[i+6] = a[5] * b[i] (high) + c[i+6]                                            */ \
              :"+r"(x[BOOST_PP_ADD(0,n)]),"+r"(x[BOOST_PP_ADD(1,n)]),"+r"(x[BOOST_PP_ADD(2,n)]),                                           \
               "+r"(x[BOOST_PP_ADD(3,n)]),"+r"(x[BOOST_PP_ADD(4,n)]),"+r"(x[BOOST_PP_ADD(5,n)]),"+r"(x[BOOST_PP_ADD(6,n)])                 \
              :"r"(z[n]),"r"(y[0]),"r"(y[1]),"r"(y[2]),"r"(y[3]),"r"(y[4]),"r"(y[5])                                                       \
          );                                                                                                                               \

    template<>
    void mul_extend<384>(boost::uint32_t* x, boost::uint32_t const* y, boost::uint32_t const* z){
           BOOST_PP_REPEAT(6, mul384bits_192bits_192bits, ~)                                                      
    }
    #undef mul384bits_192bits_192bits
    // I could merge all these lines, butI understand like this
    #define mullow1_512bits_256bits_256bits(n) \
        asm( \
              "mad.lo.cc.u32  %0, %5, %4, %0; \n\t" /* c[i]   = a[0] * b[i] (low)  + c[i] (c[i]=0 for i=0) may generate carry bit (CB) */ \
              "madc.lo.cc.u32 %1, %6, %4, %1; \n\t" /* c[i+1] = a[1] * b[i] (low)  + c[i+1] + CB                                       */ \
              "madc.lo.cc.u32 %2, %7, %4, %2; \n\t" /* c[i+2] = a[2] * b[i] (low)  + c[i+1] + CB                                       */ \
              "madc.lo.cc.u32 %3, %8, %4, %3; \n\t" /* c[i+3] = a[3] * b[i] (low)  + c[i+3] + CB                                       */ \
              :"+r"(x[BOOST_PP_ADD(0,n)]),"+r"(x[BOOST_PP_ADD(1,n)]),"+r"(x[BOOST_PP_ADD(2,n)]),"+r"(x[BOOST_PP_ADD(3,n)])                \
              :"r"(z[n]),"r"(y[0]),"r"(y[1]),"r"(y[2]),"r"(y[3])                                                                          \
          );                                                                                                                              \

    // c - line 97 I have a madc it is a bug hypothesis ! I suppose the CB is concerve between line 87 et 97, under x86 is is work, seem ok on gpu-ptx

    #define mullow2_512bits_256bits_256bits(n) \
        asm( \
              "madc.lo.cc.u32 %0, %6, %5, %0; \n\t" /* c[i+4] = a[4] * b[i] (low)  + c[i+4] (c[i]=0 for i=0) may generate carry bit (CB) */ \
              "madc.lo.cc.u32 %1, %7, %5, %1; \n\t" /* c[i+5] = a[5] * b[i] (low)  + c[i+5] + CB                                       */ \
              "madc.lo.cc.u32 %2, %8, %5, %2; \n\t" /* c[i+6] = a[6] * b[i] (low)  + c[i+6] + CB                                       */ \
              "madc.lo.cc.u32 %3, %9, %5, %3; \n\t" /* c[i+7] = a[7] * b[i] (low)  + c[i+7] + CB                                       */ \
              BOOST_PP_IF(n,"addc.cc.u32 %4, 0, 0; \n\t","\n\t") /* c[i+8] += CB, n = 0 CB impossible                  */ \
              :"+r"(x[BOOST_PP_ADD(4,n)]),"+r"(x[BOOST_PP_ADD(5,n)]),"+r"(x[BOOST_PP_ADD(6,n)]),"+r"(x[BOOST_PP_ADD(7,n)]),               \
               "+r"(x[BOOST_PP_ADD(8,n)])                                                                                                 \
              :"r"(z[n]),"r"(y[4]),"r"(y[5]),"r"(y[6]),"r"(y[7])                                                                          \
          );                                                                                                                              \

    #define mulhig1_512bits_256bits_256bits(n) \
        asm( \
              "mad.hi.cc.u32  %0, %5, %4, %0; \n\t" /* c[i]   = a[0] * b[i] (low)  + c[i] (c[i]=0 for i=0) may generate carry bit (CB) */ \
              "madc.hi.cc.u32 %1, %6, %4, %1; \n\t" /* c[i+1] = a[1] * b[i] (low)  + c[i+1] + CB                                       */ \
              "madc.hi.cc.u32 %2, %7, %4, %2; \n\t" /* c[i+2] = a[2] * b[i] (low)  + c[i+1] + CB                                       */ \
              "madc.hi.cc.u32 %3, %8, %4, %3; \n\t" /* c[i+3] = a[3] * b[i] (low)  + c[i+3] + CB                                       */ \
              :"+r"(x[BOOST_PP_ADD(1,n)]),"+r"(x[BOOST_PP_ADD(2,n)]),"+r"(x[BOOST_PP_ADD(3,n)]),"+r"(x[BOOST_PP_ADD(4,n)])                \
              :"r"(z[n]),"r"(y[0]),"r"(y[1]),"r"(y[2]),"r"(y[3])                                                                          \
          );                                                                                                                              \

    #define mulhig2_512bits_256bits_256bits(n) \
        asm( \
              "madc.hi.cc.u32 %0, %5, %4, %0; \n\t" /* c[i+4] = a[4] * b[i] (low)  + c[i+4] (c[i]=0 for i=0) may generate carry bit (CB) */ \
              "madc.hi.cc.u32 %1, %6, %4, %1; \n\t" /* c[i+5] = a[5] * b[i] (low)  + c[i+5] + CB                                       */ \
              "madc.hi.cc.u32 %2, %7, %4, %2; \n\t" /* c[i+6] = a[6] * b[i] (low)  + c[i+6] + CB                                       */ \
              "madc.hi.cc.u32 %3, %8, %4, %3; \n\t" /* c[i+7] = a[7] * b[i] (low)  + c[i+7] + CB                                       */ \
              :"+r"(x[BOOST_PP_ADD(5,n)]),"+r"(x[BOOST_PP_ADD(6,n)]),"+r"(x[BOOST_PP_ADD(7,n)]),"+r"(x[BOOST_PP_ADD(8,n)])                \
              :"r"(z[n]),"r"(y[4]),"r"(y[5]),"r"(y[6]),"r"(y[7])                                                                          \
          );                                                                                                                              \

    #define mul512bits_256bits_256bits(w, n, unused) \
            mullow1_512bits_256bits_256bits(n) \
            mullow2_512bits_256bits_256bits(n) \
            mulhig1_512bits_256bits_256bits(n) \
            mulhig2_512bits_256bits_256bits(n) 

    template<>
    void mul_extend<512>(boost::uint32_t* x, boost::uint32_t const* y, boost::uint32_t const* z){
           BOOST_PP_REPEAT(8, mul512bits_256bits_256bits, ~)
    }

    #undef mullow1_512bits_256bits_256bits
    #undef mullow2_512bits_256bits_256bits
    #undef mulhig1_512bits_256bits_256bits
    #undef mulhig2_512bits_256bits_256bits
    #undef mul512bits_256bits_256bits

    }
}

#endif
