/*
 *Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
 *
 *Timothee Ewart - University of Geneva,
 *Andreas Hehn - Swiss Federal Institute of technology Zurich.
 *Maxim Milakov - NVIDIA Corporation
 *
 *Permission is hereby granted, free of charge, to any person or organization
 *obtaining a copy of the software and accompanying documentation covered by
 *this license (the "Software") to use, reproduce, display, distribute,
 *execute, and transmit the Software, and to prepare derivative works of the
 *Software, and to permit third-parties to whom the Software is furnished to
 *do so, all subject to the following:
 *
 *The copyright notices in the Software and this entire statement, including
 *the above license grant, this restriction and the following disclaimer,
 *must be included in all copies of the Software, in whole or in part, and
 *all derivative works of the Software, unless such copies or derivative
 *works are solely in the form of machine-executable object code generated by
 *a source language processor.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *DEALINGS IN THE SOFTWARE.
 
 */

#ifndef KERNELS_GPU_NEG_HPP
#define KERNELS_GPU_NEG_HPP

#include "vli/detail/gpu/kernels/kernel_macros.h"

namespace vli{
    namespace detail{

    template <std::size_t NumBits>
    __device__ void negate(boost::uint32_t* x); 

    #define negn64_n64_gpu(z, n, unused) \
        asm( \
            "not.b32  %0, %0 ; \n\t"                                                        \
            "not.b32  %1, %1 ; \n\t"                                                        \
             BOOST_PP_IF(n,"addc.cc.u32 %0, %0, 0; \n\t","add.cc.u32  %0, %0, 1 ; \n\t")  \
            "addc.cc.u32 %1, %1, 0 ; \n\t" /* x[i+1] += y[i+1] + CB                     */ \
            :"+r"(x[BOOST_PP_MUL(2,n)]),"+r"(x[BOOST_PP_ADD(BOOST_PP_MUL(2,n),1)])          \
           ); \

    #define FUNCTION_negate_nbits(z, n, unused) \
       template<> \
       inline void negate<(n+2)*64>(unsigned int* x){         \
           BOOST_PP_REPEAT(BOOST_PP_ADD(n,2), negn64_n64_gpu , ~) \
    }  \

    BOOST_PP_REPEAT(7, FUNCTION_negate_nbits, ~)
    #undef FUNCTION_negate_nbits
    #undef negn64_n64_gpu
}}
#endif
