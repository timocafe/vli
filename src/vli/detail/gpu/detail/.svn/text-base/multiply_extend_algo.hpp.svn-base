/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*Maxim Milakov - NVIDIA Corporation
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef VLI_NUMBER_GPU_FUNCTION_HOOKS_HPP
#define VLI_NUMBER_GPU_FUNCTION_HOOKS_HPP

namespace vli {
    namespace detail {
 
   template <std::size_t NumBits>
   __device__ void helper_selector(boost::uint32_t* res, boost::uint32_t const*  a, boost::uint32_t const*  b);

   template<>
   __device__ void helper_selector<128>(boost::uint32_t* res, boost::uint32_t const*  a, boost::uint32_t const*  b){
       mul_extend<2*128>(res,a,b); // unify notation
   };

   template<>
   __device__ void helper_selector<192>(boost::uint32_t* res, boost::uint32_t const*  a, boost::uint32_t const*  b){
       mul_extend<2*192>(res,a,b); // to do unify notation 
   };

   template<>
   __device__ void helper_selector<256>(boost::uint32_t* res, boost::uint32_t const*  a, boost::uint32_t const*  b){
//       mul_extend<2*256>(res,a,b); // to do unify notation 
       karatsuba<256>(res,a,b);
   };
 

    template <std::size_t NumBits>
    __device__ void multiplies(boost::uint32_t* res, boost::uint32_t* res1, boost::uint32_t* c1, boost::uint32_t* c2){
        const unsigned int bit1 = c1[num_words<NumBits>::value-1]  >> std::numeric_limits<boost::uint32_t>::digits-1; 
        const unsigned int bit2 = c2[num_words<NumBits>::value-1]  >> std::numeric_limits<boost::uint32_t>::digits-1; 
	    const unsigned int bit3 = bit1 ^ bit2;

        const unsigned int mask1 =  -bit1;
        const unsigned int mask2 =  -bit2;
        const unsigned int mask3 =  -bit3;
        //This thing is dangerous, TO do isolate into a function an declare the block as volatile
        #pragma unroll
        for(int i(0); i<num_words<NumBits>::value ; ++i){
            c1[i] ^= mask1; 
            c2[i] ^= mask2; 
        }
       
        asm( "add.cc.u32   %0 , %0 , %1 ; \n\t" : "+r"(c1[0]):"r"(bit1)); 
        #pragma unroll
        for(int i(1); i<num_words<NumBits>::value ; ++i)
            asm( "addc.cc.u32   %0 , %0 , 0 ; \n\t" : "+r"(c1[i])); 


        asm( "add.cc.u32   %0 , %0 , %1 ; \n\t" : "+r"(c2[0]):"r"(bit2)); 
        #pragma unroll
        for(int i(1); i<num_words<NumBits>::value ; ++i)
            asm( "addc.cc.u32   %0 , %0 , 0 ; \n\t" : "+r"(c2[i])); 
        
        helper_selector<NumBits>(res1,c1,c2);

        if(mask3)
            negate<2*NumBits>(res1);

        add<2*NumBits>(res,res1);
    }
    
    } //namespace detail
} //namespace vli

#endif //VLI_NUMBER_CPU_FUNCTION_HOOKS_HPP
