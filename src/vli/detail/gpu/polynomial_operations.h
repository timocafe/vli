/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*Maxim Milakov - NVIDIA Corporation 
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef POLYNOMIAL_GPU_INTERFACE_H
#define POLYNOMIAL_GPU_INTERFACE_H

// system includes
#include <iostream>
#include <limits>
#include <vector>
#include <algorithm>

#include <boost/mpl/assert.hpp>
#include <boost/utility/enable_if.hpp>
#include <boost/cstdint.hpp> //boost type
#include <boost/serialization/singleton.hpp> //boost singleton for mem and tasklist

/* \endcond I do not need this part in the doc*/

#include "vli/detail/kernels_gpu.h" // signature interface with cpu + structure max_order_each, max_order_combined
#include "vli/detail/gpu/detail/gpu_error_message.h" //error message
#include "vli/detail/gpu/detail/variables_gpu.h" //compile time  variable
#include "vli/detail/gpu/tasklist/tasklist.h" //tasklist
#include "vli/detail/gpu/detail/gpu_mem_block.hpp" // memory
#include "vli/detail/gpu/detail/scheduler.h" // scheduler for large buffer
#include "vli/detail/gpu/kernels/kernels_gpu_neg_asm.hpp" //kernels gpu boost pp
#include "vli/detail/gpu/kernels/kernels_gpu_add_asm.hpp" //kernels gpu boost pp
#include "vli/detail/gpu/kernels/kernels_gpu_mul_asm.hpp" //kernels gpu boost pp
#include "vli/detail/gpu/detail/gpu_karatsuba_asm.h" // wrapper multiplication
#include "vli/detail/gpu/detail/multiply_extend_algo.hpp" // wrapper multiplication
#include "vli/detail/gpu/polynomial_multiplication/accelerator_polynomial_multiplication_max_order_each.hpp" // accelerator max_order_each polynomial
#include "vli/detail/gpu/polynomial_multiplication/accelerator_polynomial_multiplication_max_order_combined.hpp" // accelerator max_order_combined polynomial
#include "vli/detail/gpu/polynomial_reduction/polynomial_reduction.hpp" // final reduction

/* \cond I do not need this part in the doc*/

#endif
