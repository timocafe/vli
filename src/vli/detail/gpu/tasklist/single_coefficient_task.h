/*
 *Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
 *
 *Timothee Ewart - University of Geneva,
 *Andreas Hehn - Swiss Federal Institute of technology Zurich.
 *Maxim Milakov - NVIDIA Corporation
 *
 *Permission is hereby granted, free of charge, to any person or organization
 *obtaining a copy of the software and accompanying documentation covered by
 *this license (the "Software") to use, reproduce, display, distribute,
 *execute, and transmit the Software, and to prepare derivative works of the
 *Software, and to permit third-parties to whom the Software is furnished to
 *do so, all subject to the following:
 *
 *The copyright notices in the Software and this entire statement, including
 *the above license grant, this restriction and the following disclaimer,
 *must be included in all copies of the Software, in whole or in part, and
 *all derivative works of the Software, unless such copies or derivative
 *works are solely in the form of machine-executable object code generated by
 *a source language processor.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *DEALINGS IN THE SOFTWARE.
 */
#ifndef COEFF_TASK_H
#define COEFF_TASK_H

namespace vli {
   /* \cond I do not need this part in the doc*/
    namespace detail {

    struct single_coefficient_task {
        unsigned int step_count; // how many time the coeff wil be calculate
        unsigned char output_degree_x;
        unsigned char output_degree_y;
        unsigned char output_degree_z;
        unsigned char output_degree_w;
    };

    bool inline single_coefficient_task_sort(single_coefficient_task const& i, single_coefficient_task const& j){
        if (i.step_count != j.step_count)
           return (i.step_count > j.step_count);
       
        if (i.output_degree_w != j.output_degree_w)
           return (i.output_degree_w < j.output_degree_w);
       
        if (i.output_degree_z != j.output_degree_z)
           return (i.output_degree_z < j.output_degree_z);
       
        if (i.output_degree_y != j.output_degree_y)
           return (i.output_degree_y < j.output_degree_y);
       
        return (i.output_degree_x < j.output_degree_x);
    }

    } // end namespace detail
       /* \endcond I do not need this part in the doc*/
} // end name space vli
#endif
