/*
 *Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
 *
 *Andreas Hehn - Swiss Federal Institute of technology Zurich.
 *
 *Permission is hereby granted, free of charge, to any person or organization
 *obtaining a copy of the software and accompanying documentation covered by
 *this license (the "Software") to use, reproduce, display, distribute,
 *execute, and transmit the Software, and to prepare derivative works of the
 *Software, and to permit third-parties to whom the Software is furnished to
 *do so, all subject to the following:
 *
 *The copyright notices in the Software and this entire statement, including
 *the above license grant, this restriction and the following disclaimer,
 *must be included in all copies of the Software, in whole or in part, and
 *all derivative works of the Software, unless such copies or derivative
 *works are solely in the form of machine-executable object code generated by
 *a source language processor.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *DEALINGS IN THE SOFTWARE.
 */

#ifndef VLI__POLYNOMIAL_TRAITS_HPP
#define VLI__POLYNOMIAL_TRAITS_HPP

#include <boost/mpl/int.hpp>

/* \cond I do not need this part in the doc*/


namespace vli {

class no_variable;

template <class Coeff, class MaxOrder, class Var0, class Var1, class Var2, class Var3>
class polynomial;

template <typename Polynomial>
struct polynomial_multiply_result_type {
};

template <typename Coeff, int Order, class Var0, class Var1, class Var2, class Var3>
struct polynomial_multiply_result_type<polynomial<Coeff,max_order_each<Order>,Var0,Var1,Var2,Var3> > {
    typedef polynomial<Coeff,max_order_each<2*Order>,Var0,Var1,Var2,Var3> type;
};

template <typename Coeff, int Order, class Var0, class Var1, class Var2, class Var3>
struct polynomial_multiply_result_type<polynomial<Coeff,max_order_combined<Order>,Var0,Var1,Var2,Var3> > {
    typedef polynomial<Coeff,max_order_combined<2*Order>,Var0,Var1,Var2,Var3> type;
};

template <class Polynomial>
struct polynomial_multiply_keep_order_result_type {
};

template <typename Coeff, class MaxOrder, class Var0, class Var1, class Var2, class Var3>
struct polynomial_multiply_keep_order_result_type< polynomial<Coeff,MaxOrder,Var0,Var1,Var2,Var3> > {
    typedef polynomial<Coeff,MaxOrder,Var0,Var1,Var2,Var3> type;
};


template <class Polynomial>
struct max_order {
    typedef typename Polynomial::max_order type;
};

template <class Polynomial>
struct num_variables {
};

template <class Coeff, class MaxOrder, class Var0, class Var1, class Var2, class Var3>
struct num_variables<polynomial<Coeff,MaxOrder,Var0,Var1,Var2,Var3> >
: boost::mpl::int_<4> {
};

template <class Coeff, class MaxOrder, class Var0, class Var1, class Var2>
struct num_variables<polynomial<Coeff,MaxOrder,Var0,Var1,Var2,no_variable> >
: boost::mpl::int_<3> {
};

template <class Coeff, class MaxOrder, class Var0, class Var1>
struct num_variables<polynomial<Coeff,MaxOrder,Var0,Var1,no_variable,no_variable> >
: boost::mpl::int_<2> {
};

template <class Coeff, class MaxOrder, class Var0>
struct num_variables<polynomial<Coeff,MaxOrder,Var0,no_variable,no_variable,no_variable> >
: boost::mpl::int_<1> {
};

template <class Polynomial, unsigned int N>
struct variable {
    typedef no_variable type;
};

template <class Polynomial>
struct variable<Polynomial,0> {
    typedef typename Polynomial::var0_type type;
};

template <class Polynomial>
struct variable<Polynomial,1> {
    typedef typename Polynomial::var1_type type;
};

template <class Polynomial>
struct variable<Polynomial,2> {
    typedef typename Polynomial::var2_type type;
};

template <class Polynomial>
struct variable<Polynomial,3> {
    typedef typename Polynomial::var3_type type;
};

} // end namespace vli

/* \endcond I do not need this part in the doc*/


#endif //VLI__POLYNOMIAL_TRAITS_HPP
